/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
import { setupWorker, rest } from "msw";
import { faker } from "@faker-js/faker";

faker.seed(1);

const baseURL = "";
const MAX_ARRAY_LENGTH = 20;

let i = 0;
const next = () => {
  if (i === Number.MAX_SAFE_INTEGER - 1) {
    i = 0;
  }
  return i++;
};

export const handlers = [
  rest.get(`${baseURL}/home`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(faker.lorem.slug(1))]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/api/Values`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => faker.lorem.slug(1))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/api/Values`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/api/Values/:id`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(faker.lorem.slug(1))]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/api/Values/:id`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/api/Values/:id`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/main`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            date: {
              year: faker.datatype.number(),
              month: faker.datatype.number(),
              day: faker.datatype.number(),
              dayOfWeek: faker.helpers.arrayElement([0, 1, 2, 3, 4, 5, 6]),
              dayOfYear: faker.datatype.number(),
              dayNumber: faker.datatype.number(),
            },
            temperatureC: faker.datatype.number(),
            temperatureF: faker.datatype.number(),
            summary: faker.lorem.slug(1),
            name: faker.name.fullName(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
];

// This configures a Service Worker with the given request handlers.
export const startWorker = () => {
  const worker = setupWorker(...handlers);
  worker.start();
};
